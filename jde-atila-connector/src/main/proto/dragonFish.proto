// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.acqua.dragonfishserverwp.servicios";
option java_outer_classname = "DragonFishProto";
option objc_class_prefix = "DRG";

package servicios;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Interface exported by the server.
service DragonFishService {
  // A simple RPC.
  //
  // Login to DragonFish
  //
  // Genera JWT y Valida Conexion a DragonFish
  // position.
  rpc Login(ConfiguracionRequest) returns (TokenResponse) {}
  
  rpc Operaciones(OperacionesRequest) returns (OperacionesResponse) {}
  
  rpc GetMetadaParaOperacion(GetMetadataRequest) returns (GetMetadataResponse) {}
  
  rpc EjecutarOperacion(EjecutarOperacionRequest) returns (EjecutarOperacionResponse) {}
  
}

// Configuracion del la Conexion a DragonFish
message ConfiguracionRequest {
  string serverName = 1;
  string portNumber = 2;
  string codigoConfCliente = 3;
  string clavePrivadaConfCliente = 4;
  string algoritmo = 5;
  string user = 6;
  string password = 7;
  int64 expiracion = 8;
  string jwt = 9;
  string connectorName = 10;
  string baseUrl = 11; 
}

// Configuracion del la Conexion a DragonFish
message TokenResponse {
  string jwt = 1;
  int64 expiracionTime = 2;
}

message OperacionesRequest {
  string connectorName = 2;
}

message OperacionesResponse {
  repeated Operacion operaciones = 1;
}
 
// Configuracion del la Conexion a DragonFish
message Operacion {
  string idOperacion = 1;
  string nombreOperacion = 2;
}

message GetMetadataRequest {
  string operacionKey = 1; 
  string connectorName = 2;
}

message GetMetadataResponse {
  repeated TipoDelParametroInput listaDeParametrosInput = 1;
  repeated TipoDelParametroOutput listaDeParametrosOutput =2;
}

message TipoDelParametroInput {
  string nombreDelParametro = 1;
  string tipoDelParametroMule = 2; 
  string secuencia = 3; 
  repeated TipoDelParametroInput subParametro = 4;
  string tipoDelParametroJava = 5;
}
 
message TipoDelParametroOutput {
  string nombreDelParametro = 1;
  string tipoDelParametroMule = 2;
  string secuencia = 3; 
  repeated TipoDelParametroOutput subParametro = 4;
  string tipoDelParametroJava = 5;
}

message EjecutarOperacionRequest {
  string operacionKey = 1; 
  repeated EjecutarOperacionValores listaDeValores =2;
  string serverName = 3;
  string portNumber = 4;      
  string baseUrl = 5; 
  string connectorName = 6;
}

message EjecutarOperacionValores {
  string nombreDelParametro = 1;
  oneof muleValue {
    string valueAsString = 2;
    int32 valueAsInteger = 3;
    double valueAsDouble = 4;
    float valueAsFloat = 5;
    int64 valueAsLong = 6;
    bool valueAsBoolean = 7;
    bytes valuesAsByteString = 8;
    google.protobuf.Timestamp valueAsDate = 9;
    BDecimal valueAsBDDecimal = 10; 
    bool nullValue = 12;
    BInteger valueAsBDInteger = 13; 
  }
  repeated EjecutarOperacionValores listaDeValores =11;
}

message EjecutarOperacionResponse {
  string nombreDelParametro = 1;
  oneof muleValue {
    string valueAsString = 2;
    int32 valueAsInteger = 3;
    double valueAsDouble = 4;
    float valueAsFloat = 5;
    int64 valueAsLong = 6;
    bool valueAsBoolean = 7;
    bytes valuesAsByteString = 8;
    google.protobuf.Timestamp valueAsDate = 9; 
    BDecimal valueAsBDDecimal = 11; 
    bool nullValue = 12;
    BInteger valueAsBDInteger = 14; 
  }
  repeated EjecutarOperacionResponse listaDeValores =10;
  string tipoDelParametro = 13;
}

message BDecimal {
  int32 scale = 1;
  BInteger int_val = 2;
}

message BInteger {
  bytes value = 1;
}
